#!/usr/bin/env ruby
$LOAD_PATH.unshift File.dirname(__FILE__) + '/../vendor/plugins/rspec/lib' # For rspec installed as plugin
require 'rubygems'
require 'drb/drb'
require 'rbconfig'
require 'spec'
require 'optparse'

RESTART_EVERY = 15

# This is based on Florian Weber's TDDMate
module Spec
  module Runner
    class RailsSpecServer
      
      def initialize(options = {})
        @options = options
      end
      
      def restart_every
        @options[:restart_every]
      end
      
      def run(argv, stderr, stdout)
        $stdout = stdout
        $stderr = stderr
        
        unless ENV['NO_TTY_FAKING']
          # tell rspec it is OK to dump colored output
          # works on OS X, haven't tested anywhere else
          def $stdout.tty?; true; end
          def $stderr.tty?; true; end
        end

        dispatcher = ActionController::Dispatcher.new($stdout)
        dispatcher.run_callbacks :before_dispatch

        if Object.const_defined?(:Fixtures) && Fixtures.respond_to?(:reset_cache)
          Fixtures.reset_cache
        end

        load File.dirname(__FILE__) + '/../spec/spec_helper.rb'

        if in_memory_database?
          load "#{RAILS_ROOT}/db/schema.rb" # use db agnostic schema by default
          ActiveRecord::Migrator.up('db/migrate') # use migrations
        end

        ::Spec::Runner::CommandLine.run(
          ::Spec::Runner::OptionParser.parse(
            argv,
            $stderr,
            $stdout
          )
        )
        
        runed_once
        
        dispatcher.run_callbacks :after_dispatch, :enumerator => :reverse_each
      end
      
      # automatic restarting of a spec_server
      def runed_once
        if restart_every
          @run_count ||= 0
          exit! if (@run_count += 1) > restart_every
        end
      end

      def in_memory_database?
        ENV["RAILS_ENV"] == "test" and
        ::ActiveRecord::Base.connection.class.to_s == "ActiveRecord::ConnectionAdapters::SQLite3Adapter" and
        ::Rails::Configuration.new.database_configuration['test']['database'] == ':memory:'
      end
    end
  end
end
ENV["RAILS_ENV"] ||= "test"
puts "Loading Rails #{ENV['RAILS_ENV']} environment"

require File.expand_path(File.dirname(__FILE__) + "/../config/environment")

unless ActiveSupport::Dependencies.mechanism == :load
  puts '==== WARINING =================================================================='
  puts 'ActiveSupport::Dependencies.mechanism is not set to :load, changes to the files are not going to be picked up automaticly.'
  puts "Please set 'config.cache_classes = false' in your config/environments/#{Rails.env}.rb file."
  puts '=' * 80
end

def restart_test_server
  puts "restarting"
  config       = ::Config::CONFIG
  ruby         = File::join(config['bindir'], config['ruby_install_name']) + config['EXEEXT']
  command_line = [ruby, $0, ARGV].flatten.join(' ')
  exec(command_line)
end

def daemonize(pid_file = nil)
  return yield if $DEBUG
  pid = Process.fork{
    Process.setsid
    Dir.chdir(RAILS_ROOT)
    trap("SIGINT"){ exit! 0 }
    trap("SIGTERM"){ exit! 0 }
    trap("SIGHUP"){ restart_test_server }
    File.open("/dev/null"){|f|
      STDERR.reopen f
      STDIN.reopen  f
      STDOUT.reopen f
    }
    yield
  }
  puts "spec_server launched. (PID: %d)" % pid
  File.open(pid_file,"w"){|f| f.puts pid } if pid_file
  exit! 0
end

def restarting(&exec_server)
  Signal.trap('INT') do
    Process.kill('HUP', @child_pid) rescue nil
    exit
  end
  
  while true
    @child_pid = Process.fork do
      exec_server.call
    end
    Process.wait(@child_pid)
  end
end

options = Hash.new
opts = OptionParser.new
opts.on("-d", "--daemon"){|v| options[:daemon] = true }
opts.on("-p", "--pid PIDFILE"){|v| options[:pid] = v }
opts.on('-r [RESTART_EVERY]', '--restart-every [RESTART_EVERY]',  'Specs running through spec_server do seem to leak memory.',
                                                                  'This will keep restarting the spec_server after every [RESTART_EVERY] run.',
                                                                  'Note that this will use almost double the memory as it uses forking after',
                                                                  'loading the Rails env to speed things up.',
                                                                  "By default RESTART_EVERY = #{RESTART_EVERY}.") do |v|
  options[:restart_every] = (v && v.to_i) || RESTART_EVERY
end
opts.parse!(ARGV)

puts "Ready"
exec_server = lambda {
  trap("USR2") { restart_test_server } if Signal.list.has_key?("USR2")
  DRb.start_service("druby://127.0.0.1:8989", Spec::Runner::RailsSpecServer.new(options))
  DRb.thread.join
}

if options[:daemon]
  daemonize(options[:pid], &exec_server)
elsif options[:restart_every]
  restarting(&exec_server)
else
  exec_server.call
end
